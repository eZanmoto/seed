================================================== comments
# Comments start with a number sign.
--------------------------------------------------
================================================== values
print(null);
print(true);
print(1234);
print("Hello, world!");
print(["test", null, true, 1234, [null, true]]);
print({"hello": "world", "test": [1, 2, 3]});
--------------------------------------------------
<null>
true
1234
Hello, world!
[
    test,
    <null>,
    true,
    1234,
    [
        <null>,
        true,
    ],
]
{
    "hello": world,
    "test": [
        1,
        2,
        3,
    ],
}
================================================== operations
print(1 + 2 * 3 - 4);
print("Hello," + " world!");
print(true && false);
print(1 < 2);
print(3 >= 4);
--------------------------------------------------
3
Hello, world!
false
true
false
================================================== operations_precedence
print(2 + 3 * 4);
print((2 + 3) * 4);
print(2 * 3 + 4);
print(2 * (3 + 4));
--------------------------------------------------
14
20
10
14
================================================== operation_assignments
x := 1;

x += 2;
print(x);

x *= 3;
print(x);

x %= 2;
print(x);
--------------------------------------------------
3
9
1
================================================== operation_assignments_strings
x := "Hello";
x += ", world!";
print(x);
--------------------------------------------------
Hello, world!
================================================== variables
n := 1;
print(n);

n = 2;
print(n);
--------------------------------------------------
1
2
================================================== object_prop_names
name := "a";
names := ["b"];
print({name: "Hello", names[0]: "World"});
--------------------------------------------------
{
    "a": Hello,
    "b": World,
}
================================================== object_shorthand
a := 1;
c := 3;
print({a, "b": 2, c});
--------------------------------------------------
{
    "a": 1,
    "b": 2,
    "c": 3,
}
================================================== list_spread
xs := [1, 2];
print([xs.., 3, xs..]);
--------------------------------------------------
[
    1,
    2,
    3,
    1,
    2,
]
================================================== args_spread
fn f(a, b) {
    print(a);
    print(b);
}

xs := [1, 2];

f(xs..);
--------------------------------------------------
1
2
================================================== object_spread
xs := {"a": 1, "b": 2, "c": 3};
print({xs.., "c": 4});
--------------------------------------------------
{
    "a": 1,
    "b": 2,
    "c": 4,
}
================================================== indexing
xs := null;

xs = ["a", "b", "c"];
print(xs[1]);

xs = "abc";
print(xs[1]);

xs = {"a": 1, "b": 2, "c": 3};
print(xs["b"]);
--------------------------------------------------
b
b
2
================================================== index_assign
xs := null;

xs = ["a", null, "c"];
xs[1] = "b";
print(xs);

xs = {"a": 1, "b": null, "c": 3};
xs["b"] = 2;
print(xs);
--------------------------------------------------
[
    a,
    b,
    c,
]
{
    "a": 1,
    "b": 2,
    "c": 3,
}
================================================== object_props
xs := {"a": 1, "b": 2, "c": 3};
print(xs.b);
--------------------------------------------------
2
================================================== object_prop_assign
xs := {"a": 1, "b": null, "c": 3};
xs.b = 2;
xs.d = 4;
print(xs);
--------------------------------------------------
{
    "a": 1,
    "b": 2,
    "c": 3,
    "d": 4,
}
================================================== range_indexing
s := "abcdef";
print(s[2:4]);
print(s[:4]);
print(s[2:]);
print(s[:]);

xs := [1, 2, 3, 4, 5, 6];
print(xs[2:4]);
--------------------------------------------------
cd
abcd
cdef
abcdef
[
    3,
    4,
]
================================================== range_index_assign
xs := [1, 2, 3, 4, 5];
xs[1:4] = [7, 8, 9];
print(xs);
xs[1:4] = "abc";
print(xs); # [1, "a", "b", "c", 5]
--------------------------------------------------
[
    1,
    7,
    8,
    9,
    5,
]
[
    1,
    a,
    b,
    c,
    5,
]
================================================== range
print(0 .. 4);
print(-1 .. 2);
print(4 .. 0);
--------------------------------------------------
[
    0,
    1,
    2,
    3,
]
[
    -1,
    0,
    1,
]
[
]
================================================== variables_scoping
n := 1;
{
    print(n);

    n = 2;
    print(n);

    n := 3;
    print(n);

    n = 4;
    print(n);
}
print(n);
--------------------------------------------------
1
2
3
4
2
================================================== if_statements
if true {
    print("expected");
} else if false {
    print("unexpected");
} else {
    print("unexpected");
}
--------------------------------------------------
expected
================================================== while_loops
i := 0;
while i < 3 {
    print(i);
    i += 1;
}
print(i);
--------------------------------------------------
0
1
2
3
================================================== break_while
i := 0;
while true {
    if i >= 3 {
        break;
    }

    print(i);
    i += 1;
}
print(i);
--------------------------------------------------
0
1
2
3
================================================== continue_while
i := 0;
while i < 6 {
    i += 1;

    if i == 3 || i == 4 {
        continue;
    }

    print(i);
}
--------------------------------------------------
1
2
5
6
================================================== for_in_string
for ic in "abc" {
    print(ic);
}
--------------------------------------------------
[
    0,
    a,
]
[
    1,
    b,
]
[
    2,
    c,
]
================================================== break_for
for iv in [1, 2, 3, 4] {
    if iv == [2, 3] {
        break;
    }
    print(iv);
}
--------------------------------------------------
[
    0,
    1,
]
[
    1,
    2,
]
================================================== continue_for
for iv in [1, 2, 3, 4] {
    if iv == [1, 2] || iv == [2, 3] {
        continue;
    }
    print(iv);
}
--------------------------------------------------
[
    0,
    1,
]
[
    3,
    4,
]
================================================== functions
fn add(a, b) {
    return a + b;
}
print(add(1, 2));
--------------------------------------------------
3
================================================== functions_closure
v := 1;
fn inc_v() {
    v = v + 1;
}

print(v);
inc_v();
print(v);
--------------------------------------------------
1
2
================================================== function_variables
add := fn (a, b) {
    return a + b;
};
print(add(1, 2));
--------------------------------------------------
3
================================================== object_destruct
xs := {"a": 1, "b": 2, "c": 3};
{a, c} := xs;
print(a);
print(c);
--------------------------------------------------
1
3
================================================== object_destruct_rename
xs := {"a": 1, "b": 2};
{"a": b, "b": a} := xs;
print(a);
print(b);
--------------------------------------------------
2
1
================================================== list_destruct
xs := [1, 2, 3];
[a, b, c] := xs;
print(a);
print(b);
print(c);
--------------------------------------------------
1
2
3
================================================== list_destruct_collect
xs := [1, 2];
[a, b, ..c] := xs;
print(c);
xs = [1, 2, 3, 4];
[a, b, ..c] = xs;
print(c);
--------------------------------------------------
[
]
[
    3,
    4,
]
==================================================
