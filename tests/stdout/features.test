================================================== comments
# Comments start with a number sign.
--------------------------------------------------
================================================== values
print(null);
print(true);
print(1234);
print("Hello, world!");
print(["test", null, true, 1234, [null, true]]);
print({"hello": "world", "test": [1, 2, 3]});
--------------------------------------------------
<null>
true
1234
Hello, world!
[
    test,
    <null>,
    true,
    1234,
    [
        <null>,
        true,
    ],
]
{
    "hello": world,
    "test": [
        1,
        2,
        3,
    ],
}
================================================== operations
print(1 + 2 * 3 - 4);
print("Hello," + " world!");
print(true && false);
print(1 < 2);
print(3 >= 4);
--------------------------------------------------
3
Hello, world!
false
true
false
================================================== operations_precedence
print(2 + 3 * 4);
print((2 + 3) * 4);
print(2 * 3 + 4);
print(2 * (3 + 4));
--------------------------------------------------
14
20
10
14
================================================== operation_assignments
x := 1;

x += 2;
print(x);

x *= 3;
print(x);

x %= 2;
print(x);
--------------------------------------------------
3
9
1
================================================== operation_assignments_strings
x := "Hello";
x += ", world!";
print(x);
--------------------------------------------------
Hello, world!
================================================== variables
n := 1;
print(n);

n = 2;
print(n);
--------------------------------------------------
1
2
================================================== variables_scoping
n := 1;
{
    print(n);

    n = 2;
    print(n);

    n := 3;
    print(n);

    n = 4;
    print(n);
}
print(n);
--------------------------------------------------
1
2
3
4
2
================================================== if_statements
if true {
    print("expected");
} else if false {
    print("unexpected");
} else {
    print("unexpected");
}
--------------------------------------------------
expected
================================================== functions
fn add(a, b) {
    return a + b;
}
print(add(1, 2));
--------------------------------------------------
3
================================================== functions_closure
v := 1;
fn inc_v() {
    v = v + 1;
}

print(v);
inc_v();
print(v);
--------------------------------------------------
1
2
==================================================
