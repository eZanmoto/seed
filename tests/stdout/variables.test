================================================== object_shorthand
a := 1;
c := 3;
print({a, "b": 2, c});
--------------------------------------------------
{
    "a": 1,
    "b": 2,
    "c": 3,
}
================================================== list_spread
xs := [1, 2, 3];
print([xs.., 4, xs..]);
--------------------------------------------------
[
    1,
    2,
    3,
    4,
    1,
    2,
    3,
]
================================================== args_spread
fn f(a, b) {
    print(a);
    print(b);
}

xs := [1, 2];

f(xs..);
--------------------------------------------------
1
2
================================================== range_index_assign
xs := [1, 2, 3, 4, 5];
xs[1:4] = ["a", "b", "c"];
print(xs);
--------------------------------------------------
[
    1,
    a,
    b,
    c,
    5,
]
================================================== range_index_assign_string
xs := [1, 2, 3, 4, 5];
xs[1:4] = "abc";
print(xs);
--------------------------------------------------
[
    1,
    a,
    b,
    c,
    5,
]
================================================== range_index_reference
xs := [{"a": 1}, {"b": 2}];
ys := [null, null];
ys[0:2] = xs;
ys[0].a = 2;
ys[1].b = 3;
print(xs);
--------------------------------------------------
[
    {
        "a": 2,
    },
    {
        "b": 3,
    },
]
================================================== object_destruct1
{a} := {"a": 1, "b": 2};
print(a);
--------------------------------------------------
1
================================================== object_destruct2
{a, b} := {"a": 1, "b": 2};
print(a);
print(b);
--------------------------------------------------
1
2
================================================== object_destruct_rename1
{"a": b} := {"a": 1, "b": 2};
print(b);
--------------------------------------------------
1
================================================== object_destruct_rename2
a := 3;
{"a": b} := {"a": 1, "b": 2};
print(a);
print(b);
--------------------------------------------------
3
1
================================================== object_destruct_rename3
{"a": a} := {"a": 1, "b": 2};
print(a);
--------------------------------------------------
1
================================================== object_destruct_rename4
key_name := "b";
{key_name: b} := {"a": 1, "b": 2};
print(b);
--------------------------------------------------
2
================================================== list_destruct
[a, b, c] := [1, 2, 3];
print(a);
--------------------------------------------------
1
================================================== list_collect_2_to_3
[a, b, ..c] := [1, 2];
print(c);
--------------------------------------------------
[
]
================================================== list_collect_3_to_3
[a, b, ..c] := [1, 2, 3];
print(c);
--------------------------------------------------
[
    3,
]
================================================== list_collect_4_to_3
[a, b, ..c] := [1, 2, 3, 4];
print(c);
--------------------------------------------------
[
    3,
    4,
]
================================================== object_spread
xs := {"a": 1, "b": 2};
print({xs.., "c": 3});
--------------------------------------------------
{
    "a": 1,
    "b": 2,
    "c": 3,
}
================================================== object_spread_shadowing1
xs := {"a": 1, "b": 2};
print({xs.., "b": 3});
--------------------------------------------------
{
    "a": 1,
    "b": 3,
}
================================================== object_spread_shadowing2
xs := {"a": 1, "b": 2};
print({"b": 3, xs..});
--------------------------------------------------
{
    "a": 1,
    "b": 2,
}
================================================== object_collect1
xs := {"a": 1, "b": 2, "c": 3, "d": 4};
{b, ..rest} := xs;
print(b);
print(rest);
--------------------------------------------------
2
{
    "a": 1,
    "c": 3,
    "d": 4,
}
================================================== object_collect2
xs := {"a": 1, "b": 2, "c": 3, "d": 4};
{b, d, ..rest} := xs;
print(b);
print(d);
print(rest);
--------------------------------------------------
2
4
{
    "a": 1,
    "c": 3,
}
================================================== list_ref_update
xs := ["a", "b", "c"];
ys := xs;
ys[1] = "d";
print(xs);
--------------------------------------------------
[
    a,
    d,
    c,
]
================================================== object_ref_update
xs := {"a": 1, "b": 2};
ys := xs;
ys.b = 3;
print(xs);
--------------------------------------------------
{
    "a": 1,
    "b": 3,
}
================================================== params_collect_2_to_3
fn f(a, b, ..c) {
    print(c);
}
f(1, 2);
--------------------------------------------------
[
]
================================================== params_collect_3_to_3
fn f(a, b, ..c) {
    print(c);
}
f(1, 2, 3);
--------------------------------------------------
[
    3,
]
================================================== params_collect_4_to_3
fn f(a, b, ..c) {
    print(c);
}
f(1, 2, 3, 4);
--------------------------------------------------
[
    3,
    4,
]
================================================== params_spread_collect
fn f(a, b, ..c) {
    print(c);
}
xs := [2, 3];
f(1, xs.., 4);
--------------------------------------------------
[
    3,
    4,
]
================================================== assign_underscore
_ = 1;
_ := 1;
_ := 1;
--------------------------------------------------
================================================== list_destruct_underscore1
[a, _, c, d] := [1, 2, 3, 4];
print(a);
print(c);
print(d);
--------------------------------------------------
1
3
4
================================================== list_destruct_underscore2
a := null;
rest := null;
[a, _, ..rest] = [1, 2, 3, 4];
print(a);
print(rest);
--------------------------------------------------
1
[
    3,
    4,
]
================================================== list_destruct_underscore3
[a, _, ..rest] := [1, 2, 3, 4];
print(a);
print(rest);
--------------------------------------------------
1
[
    3,
    4,
]
================================================== list_destruct_underscore4
[_, _, ..rest] := [1, 2, 3, 4];
print(rest);
--------------------------------------------------
[
    3,
    4,
]
================================================== object_destruct_underscore
{a, "b": _, ..rest} := {"a": 1, "b": 2, "c": 3};
print(a);
print(rest);
--------------------------------------------------
1
{
    "c": 3,
}
================================================== params_underscore
fn f(a, _, ..c) {
    print(c);
}
f(1, 2, 3, 4);
--------------------------------------------------
[
    3,
    4,
]
================================================== self_assign
# This test helps to validate the logic for
# assignment; an implementation of assignment that
# locks both the source and target reference may
# cause a deadlock if not implemented correctly.
# See `eval::scope::ScopeStack::assign` for more
# details.
x := 1;
x = x;
print(x);
--------------------------------------------------
1
--------------------------------------------------
================================================== assign1
x := 1;
y := x;
x = 2;
print(x);
print(y);
--------------------------------------------------
2
1
================================================== assign2
x := 1;
y := x;
z := y;
x = 2;
print(x);
print(y);
print(z);
--------------------------------------------------
2
1
1
================================================== assign3
x := 1;
y := x;
z := x;
x = 2;
print(x);
print(y);
print(z);
--------------------------------------------------
2
1
1
================================================== assign4
x := 1;
y := 2;
y = x;
x = 3;
print(x);
print(y);
--------------------------------------------------
3
1
==================================================
